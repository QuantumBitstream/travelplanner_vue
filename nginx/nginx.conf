user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    server {
        listen 80;
        server_name localhost;

        # 反向代理 /api 路径
        # 你的 /api/xxx 并未被正确代理，而 Nginx 又找不到本地 /usr/share/nginx/html/api/xxx，就返回 404。
        location ^~ /api/ {
            # 这里是关键：将 /api/ 请求转发到后端服务
            proxy_pass http://backend:8081/api/;

            # 保留原始请求信息
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # WebSocket 反向代理 - 处理 /chat 路径的请求
        location ^~ /chat {
            proxy_pass http://backend:8081/chat;

            # WebSocket 必要的头部设置
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # 常规代理设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # WebSocket 连接超时设置
            proxy_read_timeout 3600s;    # 长连接保持时间
            proxy_send_timeout 3600s;    # 发送超时
        }
        
        # 前端文件
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # 健康检查页面
        location = /health {
            access_log off;
            return 200 "Nginx is healthy\n";
        }
    }
}

#
# # 全局配置部分
# user  nginx;                          # 使用nginx用户运行进程
# worker_processes  auto;               # 自动检测CPU核心数设置工作进程
#
# error_log  /var/log/nginx/error.log warn;  # 错误日志路径及级别
# pid        /var/run/nginx.pid;        # pid文件位置
#
#
# # events 块
# events {
#     worker_connections  1024;         # 每个工作进程最大连接数
# }
#
# # http 通用配置
# http {
#
#     log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                           '$status $body_bytes_sent "$http_referer" '
#                           '"$http_user_agent" "$http_x_forwarded_for"';
#
#     access_log  /var/log/nginx/access.log  main;  # 访问日志路径
#
#     sendfile            on;           # 启用高效文件传输
#     tcp_nopush          on;           # 优化TCP包传输
#     tcp_nodelay         on;           # 禁用Nagle算法
#     keepalive_timeout   65;           # 保持连接超时
#     types_hash_max_size 4096;         # MIME类型哈希表大小
#
#     include             /etc/nginx/mime.types;  # 引入MIME类型配置
#     default_type        application/octet-stream;  # 默认MIME类型
#
#     # Load modular configuration files from the /etc/nginx/conf.d directory.
#     # See http://nginx.org/en/docs/ngx_core_module.html#include
#     # for more information.
#     include /etc/nginx/conf.d/*.conf;
#
#     # 反向代理服务器
#     upstream travelplanner-api {
#         # 使用 Docker Compose 启动 每个 image 时，每个服务会自动拥有一个以服务名命名的容器内 DNS 域名（例如 backend）。
#         # Nginx 必须和 backend 服务在同一 Docker 网络下，才能通过服务名（例如 backend）访问。
#         server backend:8081;
#     }
#
#     server {
#         listen       80;
#         listen       8080;
#         listen  [::]:80;
#         listen  [::]:8080;
#         # 不建议写 localhost，否则你用公网 IP 访问时Nginx 不会匹配你的请求请求，不会进入这个 server 块，就会返回 404。
#         # server_name  localhost;  # 这样配置在云环境可能导致：用公网 IP 访问时 nginx 不匹配 localhost 这个 server_name
#         server_name  _;  # 匹配所有请求，包括IP直接访问
#
#         # 静态资源根目录
#         root /usr/share/nginx/html;
#         index index.html;
#
#         access_log  /var/log/nginx/access.log  combined;
#         error_log   /var/log/nginx/error.log   warn;
#
#
#
#
#
#         # # 示例：反向代理配置
#         # location /api/ {
#         #     proxy_pass http://myapp:8011/;
#         #     proxy_set_header Host $host;
#         #     proxy_set_header X-Real-IP $remote_addr;
#         #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         # }
#
#         # 路由映射
#         # API 反向代理 - 这部分是关键，替代了 vue.config.js 中的 proxy
#         # 本地开发时：vue.config.js 中有 proxy 配置
#         # 打包部署时：只构建了 Vue 应用，没有配置 Nginx 代理规则
#         #
#         # 本地运行 npm run serve 时，会启动一个 Vue CLI 的开发服务器
#         # vue.config.js 中的 devServer.proxy 配置只在这个模式下生效
#         # API 请求按照这个代理配置被转发
#         # 比如访问 /api/users 会被开发服务器代理到后端 http://backend:8081/api/users
#         #
#         #  Docker 部署（前端容器化）
#         # 前端经过 npm run build 变成纯静态 HTML/JS/CSS 文件
#         # 这些文件被打包进 Docker 镜像，由 Nginx 提供服务
#         # 此时 vue.config.js 完全不再起作用（已构建完成）
#         # 所有 API 反向代理必须配置在 Nginx 的配置文件中
#         # location /api {
#         #     proxy_pass http://travelplanner-api;  # 指向你的后端api
#         #     proxy_set_header Host $host;
#         #     proxy_set_header X-Real-IP $remote_addr;
#         # }
#
#         # 普通 HTTP API 反向代理
#         # proxy_pass http://backend:8081/api/;
#         location ^~ /api/ {
#             proxy_pass http://travelplanner-api/api/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         }
#
#         # WebSocket 反向代理
#         location /chat/ {
#             # proxy_pass http://backend:8081/chat/;
#             proxy_pass http://travelplanner-api/chat/;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "upgrade";
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_read_timeout 3600s; # WebSocket 长连接超时设置
#             proxy_send_timeout 3600s;
#         }
#
#         # 静态资源缓存和 gzip 压缩
#         location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
#             expires 30d;
#             add_header Cache-Control "public, no-transform";
#             gzip on;
#             gzip_min_length 1k;
#             gzip_buffers 4 16k;
#             gzip_comp_level 6;
#             gzip_types text/plain text/css application/javascript application/json application/xml image/svg+xml;
#             gzip_vary on;
#         }
#
#         # 静态文件服务
#         location / {
#             root   /usr/share/nginx/html;  # # Vue 构建的文件位置
#             index  index.html index.htm;
#             try_files $uri $uri/ /index.html;
#         }
#
#         # 错误页面配置
#         error_page   500 502 503 504  /50x.html;
#         location = /50x.html {
#             root   /usr/share/nginx/html;
#         }
#     }
# }
