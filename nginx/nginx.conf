user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # 反向代理服务器
    upstream backend {
        # 使用 Docker Compose 启动 每个 image 时，每个服务会自动拥有一个以服务名命名的容器内 DNS 域名（例如 backend）。
        # Nginx 必须和 backend 服务在同一 Docker 网络下，才能通过服务名（例如 backend）访问。
        server backend:8081;
    }

    server {
        listen       80;
        listen  [::]:80;
        server_name  localhost;

        # 静态资源根目录
        root /usr/share/nginx/html;
        index index.html;

        access_log  /var/log/nginx/access.log  combined;
        error_log   /var/log/nginx/error.log   warn;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # 静态资源缓存和 gzip 压缩
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            gzip on;
            gzip_min_length 1k;
            gzip_buffers 4 16k;
            gzip_comp_level 6;
            gzip_types text/plain text/css application/javascript application/json application/xml image/svg+xml;
            gzip_vary on;
        }

#         # 示例：反向代理配置
#         location /api/ {
#             proxy_pass http://myapp:8011/;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         }

        # 路由映射
        location /api/ {
            proxy_pass http://backend/api/;
        }

        # 错误页面配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
