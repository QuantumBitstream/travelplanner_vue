user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    # 反向代理服务器
    upstream travelplanner-api {
        # 使用 Docker Compose 启动 每个 image 时，每个服务会自动拥有一个以服务名命名的容器内 DNS 域名（例如 backend）。
        # Nginx 必须和 backend 服务在同一 Docker 网络下，才能通过服务名（例如 backend）访问。
        server backend:8081;
    }

    server {
        listen       80;
        listen  [::]:80;
        server_name  _;

        # 静态资源根目录
        root /usr/share/nginx/html;
        index index.html;

        access_log  /var/log/nginx/access.log  combined;
        error_log   /var/log/nginx/error.log   warn;



        # 静态资源缓存和 gzip 压缩
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            gzip on;
            gzip_min_length 1k;
            gzip_buffers 4 16k;
            gzip_comp_level 6;
            gzip_types text/plain text/css application/javascript application/json application/xml image/svg+xml;
            gzip_vary on;
        }

        # # 示例：反向代理配置
        # location /api/ {
        #     proxy_pass http://myapp:8011/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # }

        # 路由映射
        # API 反向代理 - 这部分是关键，替代了 vue.config.js 中的 proxy
        # 本地开发时：vue.config.js 中有 proxy 配置
        # 打包部署时：只构建了 Vue 应用，没有配置 Nginx 代理规则
        #
        # 本地运行 npm run serve 时，会启动一个 Vue CLI 的开发服务器
        # vue.config.js 中的 devServer.proxy 配置只在这个模式下生效
        # API 请求按照这个代理配置被转发
        # 比如访问 /api/users 会被开发服务器代理到后端 http://backend:8081/api/users
        #
        #  Docker 部署（前端容器化）
        # 前端经过 npm run build 变成纯静态 HTML/JS/CSS 文件
        # 这些文件被打包进 Docker 镜像，由 Nginx 提供服务
        # 此时 vue.config.js 完全不再起作用（已构建完成）
        # 所有 API 反向代理必须配置在 Nginx 的配置文件中
        # location /api {
        #     proxy_pass http://travelplanner-api;  # 指向你的后端api
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        # }

        # 普通 HTTP API 反向代理
        location /api/ {
            # proxy_pass http://backend:8081/api/;
            proxy_pass http://travelplanner-api/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # WebSocket 反向代理
        location /chat/ {
            # proxy_pass http://backend:8081/chat/;
            proxy_pass http://travelplanner-api/chat/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_read_timeout 3600s; # WebSocket 长连接超时设置
            proxy_send_timeout 3600s;
        }

        # 静态文件服务
        location / {
            root   /usr/share/nginx/html;  # # Vue 构建的文件位置
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # 错误页面配置
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
